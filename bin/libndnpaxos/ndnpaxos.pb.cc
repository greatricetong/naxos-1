// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ndnpaxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ndnpaxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndnpaxos {

namespace {

const ::google::protobuf::Descriptor* MsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPrepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPrepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAckPrepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAckPrepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAckAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAckAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDecide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDecide_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLearn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLearn_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeach_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCommit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCommit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPeriodTryTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPeriodTryTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ndnpaxos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ndnpaxos_2eproto() {
  protobuf_AddDesc_ndnpaxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ndnpaxos.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHeader_descriptor_ = file->message_type(0);
  static const int MsgHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, slot_id_),
  };
  MsgHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgHeader_descriptor_,
      MsgHeader::default_instance_,
      MsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _internal_metadata_),
      -1);
  PropValue_descriptor_ = file->message_type(1);
  static const int PropValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, integrity_),
  };
  PropValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropValue_descriptor_,
      PropValue::default_instance_,
      PropValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(PropValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _internal_metadata_),
      -1);
  MsgPrepare_descriptor_ = file->message_type(2);
  static const int MsgPrepare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, ballot_id_),
  };
  MsgPrepare_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgPrepare_descriptor_,
      MsgPrepare::default_instance_,
      MsgPrepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgPrepare),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, _internal_metadata_),
      -1);
  MsgAckPrepare_descriptor_ = file->message_type(3);
  static const int MsgAckPrepare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, max_ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, max_prop_value_),
  };
  MsgAckPrepare_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgAckPrepare_descriptor_,
      MsgAckPrepare::default_instance_,
      MsgAckPrepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgAckPrepare),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, _internal_metadata_),
      -1);
  MsgAccept_descriptor_ = file->message_type(4);
  static const int MsgAccept_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, prop_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, last_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, last_value_),
  };
  MsgAccept_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgAccept_descriptor_,
      MsgAccept::default_instance_,
      MsgAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgAccept),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, _internal_metadata_),
      -1);
  MsgAckAccept_descriptor_ = file->message_type(5);
  static const int MsgAckAccept_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, reply_),
  };
  MsgAckAccept_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgAckAccept_descriptor_,
      MsgAckAccept::default_instance_,
      MsgAckAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgAckAccept),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, _internal_metadata_),
      -1);
  MsgDecide_descriptor_ = file->message_type(6);
  static const int MsgDecide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecide, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecide, value_id_),
  };
  MsgDecide_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgDecide_descriptor_,
      MsgDecide::default_instance_,
      MsgDecide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecide, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgDecide),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecide, _internal_metadata_),
      -1);
  MsgLearn_descriptor_ = file->message_type(7);
  static const int MsgLearn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLearn, msg_header_),
  };
  MsgLearn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgLearn_descriptor_,
      MsgLearn::default_instance_,
      MsgLearn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLearn, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgLearn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLearn, _internal_metadata_),
      -1);
  MsgTeach_descriptor_ = file->message_type(8);
  static const int MsgTeach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeach, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeach, prop_value_),
  };
  MsgTeach_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgTeach_descriptor_,
      MsgTeach::default_instance_,
      MsgTeach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeach, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgTeach),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeach, _internal_metadata_),
      -1);
  MsgCommit_descriptor_ = file->message_type(9);
  static const int MsgCommit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommit, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommit, prop_value_),
  };
  MsgCommit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgCommit_descriptor_,
      MsgCommit::default_instance_,
      MsgCommit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommit, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgCommit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommit, _internal_metadata_),
      -1);
  MsgCommand_descriptor_ = file->message_type(10);
  static const int MsgCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommand, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommand, cmd_type_),
  };
  MsgCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgCommand_descriptor_,
      MsgCommand::default_instance_,
      MsgCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommand, _internal_metadata_),
      -1);
  MsgPeriodTryTime_descriptor_ = file->message_type(11);
  static const int MsgPeriodTryTime_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, exe_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, try_time_),
  };
  MsgPeriodTryTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgPeriodTryTime_descriptor_,
      MsgPeriodTryTime::default_instance_,
      MsgPeriodTryTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgPeriodTryTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPeriodTryTime, _internal_metadata_),
      -1);
  MsgResult_descriptor_ = file->message_type(12);
  static const int MsgResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, throughput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, msg_ptt_),
  };
  MsgResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgResult_descriptor_,
      MsgResult::default_instance_,
      MsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, _internal_metadata_),
      -1);
  MsgType_descriptor_ = file->enum_type(0);
  CmdType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ndnpaxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgHeader_descriptor_, &MsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropValue_descriptor_, &PropValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgPrepare_descriptor_, &MsgPrepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgAckPrepare_descriptor_, &MsgAckPrepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgAccept_descriptor_, &MsgAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgAckAccept_descriptor_, &MsgAckAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgDecide_descriptor_, &MsgDecide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgLearn_descriptor_, &MsgLearn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgTeach_descriptor_, &MsgTeach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgCommit_descriptor_, &MsgCommit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgCommand_descriptor_, &MsgCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgPeriodTryTime_descriptor_, &MsgPeriodTryTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgResult_descriptor_, &MsgResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ndnpaxos_2eproto() {
  delete MsgHeader::default_instance_;
  delete MsgHeader_reflection_;
  delete PropValue::default_instance_;
  delete PropValue_reflection_;
  delete MsgPrepare::default_instance_;
  delete MsgPrepare_reflection_;
  delete MsgAckPrepare::default_instance_;
  delete MsgAckPrepare_reflection_;
  delete MsgAccept::default_instance_;
  delete MsgAccept_reflection_;
  delete MsgAckAccept::default_instance_;
  delete MsgAckAccept_reflection_;
  delete MsgDecide::default_instance_;
  delete MsgDecide_reflection_;
  delete MsgLearn::default_instance_;
  delete MsgLearn_reflection_;
  delete MsgTeach::default_instance_;
  delete MsgTeach_reflection_;
  delete MsgCommit::default_instance_;
  delete MsgCommit_reflection_;
  delete MsgCommand::default_instance_;
  delete MsgCommand_reflection_;
  delete MsgPeriodTryTime::default_instance_;
  delete MsgPeriodTryTime_reflection_;
  delete MsgResult::default_instance_;
  delete MsgResult_reflection_;
}

void protobuf_AddDesc_ndnpaxos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ndnpaxos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ndnpaxos.proto\022\010ndnpaxos\"R\n\tMsgHeader\022"
    "#\n\010msg_type\030\001 \002(\0162\021.ndnpaxos.MsgType\022\017\n\007"
    "node_id\030\002 \002(\r\022\017\n\007slot_id\030\003 \002(\004\"]\n\tPropVa"
    "lue\022\n\n\002id\030\001 \002(\004\022\014\n\004data\030\002 \002(\t\022#\n\010cmd_typ"
    "e\030\003 \001(\0162\021.ndnpaxos.CmdType\022\021\n\tintegrity\030"
    "\004 \001(\010\"H\n\nMsgPrepare\022\'\n\nmsg_header\030\001 \002(\0132"
    "\023.ndnpaxos.MsgHeader\022\021\n\tballot_id\030\002 \002(\004\""
    "\236\001\n\rMsgAckPrepare\022\'\n\nmsg_header\030\001 \002(\0132\023."
    "ndnpaxos.MsgHeader\022\021\n\tballot_id\030\002 \002(\004\022\r\n"
    "\005reply\030\003 \002(\010\022\025\n\rmax_ballot_id\030\004 \002(\004\022+\n\016m"
    "ax_prop_value\030\005 \001(\0132\023.ndnpaxos.PropValue"
    "\"\227\001\n\tMsgAccept\022\'\n\nmsg_header\030\001 \002(\0132\023.ndn"
    "paxos.MsgHeader\022\021\n\tballot_id\030\002 \002(\004\022\'\n\npr"
    "op_value\030\003 \002(\0132\023.ndnpaxos.PropValue\022\021\n\tl"
    "ast_slot\030\004 \001(\004\022\022\n\nlast_value\030\005 \001(\004\"Y\n\014Ms"
    "gAckAccept\022\'\n\nmsg_header\030\001 \002(\0132\023.ndnpaxo"
    "s.MsgHeader\022\021\n\tballot_id\030\002 \002(\004\022\r\n\005reply\030"
    "\003 \002(\010\"F\n\tMsgDecide\022\'\n\nmsg_header\030\001 \002(\0132\023"
    ".ndnpaxos.MsgHeader\022\020\n\010value_id\030\002 \002(\004\"3\n"
    "\010MsgLearn\022\'\n\nmsg_header\030\001 \002(\0132\023.ndnpaxos"
    ".MsgHeader\"\\\n\010MsgTeach\022\'\n\nmsg_header\030\001 \002"
    "(\0132\023.ndnpaxos.MsgHeader\022\'\n\nprop_value\030\002 "
    "\002(\0132\023.ndnpaxos.PropValue\"]\n\tMsgCommit\022\'\n"
    "\nmsg_header\030\001 \002(\0132\023.ndnpaxos.MsgHeader\022\'"
    "\n\nprop_value\030\002 \002(\0132\023.ndnpaxos.PropValue\""
    "Z\n\nMsgCommand\022\'\n\nmsg_header\030\001 \002(\0132\023.ndnp"
    "axos.MsgHeader\022#\n\010cmd_type\030\002 \002(\0162\021.ndnpa"
    "xos.CmdType\"Y\n\020MsgPeriodTryTime\022\017\n\007perce"
    "nt\030\001 \002(\002\022\016\n\006period\030\002 \002(\r\022\022\n\nexe_period\030\003"
    " \002(\r\022\020\n\010try_time\030\004 \002(\r\"L\n\tMsgResult\022\022\n\nt"
    "hroughput\030\001 \002(\r\022+\n\007msg_ptt\030\002 \003(\0132\032.ndnpa"
    "xos.MsgPeriodTryTime*x\n\007MsgType\022\013\n\007PREPA"
    "RE\020\000\022\013\n\007PROMISE\020\001\022\n\n\006ACCEPT\020\002\022\014\n\010ACCEPTE"
    "D\020\003\022\n\n\006DECIDE\020\004\022\t\n\005LEARN\020\005\022\t\n\005TEACH\020\006\022\n\n"
    "\006COMMIT\020\007\022\013\n\007COMMAND\020\010*L\n\007CmdType\022\016\n\nSET"
    "_MASTER\020\000\022\020\n\014REPLY_DECIDE\020\001\022\017\n\013REPLY_TEA"
    "CH\020\002\022\016\n\nSET_QUORUM\020\003", 1460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ndnpaxos.proto", &protobuf_RegisterTypes);
  MsgHeader::default_instance_ = new MsgHeader();
  PropValue::default_instance_ = new PropValue();
  MsgPrepare::default_instance_ = new MsgPrepare();
  MsgAckPrepare::default_instance_ = new MsgAckPrepare();
  MsgAccept::default_instance_ = new MsgAccept();
  MsgAckAccept::default_instance_ = new MsgAckAccept();
  MsgDecide::default_instance_ = new MsgDecide();
  MsgLearn::default_instance_ = new MsgLearn();
  MsgTeach::default_instance_ = new MsgTeach();
  MsgCommit::default_instance_ = new MsgCommit();
  MsgCommand::default_instance_ = new MsgCommand();
  MsgPeriodTryTime::default_instance_ = new MsgPeriodTryTime();
  MsgResult::default_instance_ = new MsgResult();
  MsgHeader::default_instance_->InitAsDefaultInstance();
  PropValue::default_instance_->InitAsDefaultInstance();
  MsgPrepare::default_instance_->InitAsDefaultInstance();
  MsgAckPrepare::default_instance_->InitAsDefaultInstance();
  MsgAccept::default_instance_->InitAsDefaultInstance();
  MsgAckAccept::default_instance_->InitAsDefaultInstance();
  MsgDecide::default_instance_->InitAsDefaultInstance();
  MsgLearn::default_instance_->InitAsDefaultInstance();
  MsgTeach::default_instance_->InitAsDefaultInstance();
  MsgCommit::default_instance_->InitAsDefaultInstance();
  MsgCommand::default_instance_->InitAsDefaultInstance();
  MsgPeriodTryTime::default_instance_->InitAsDefaultInstance();
  MsgResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ndnpaxos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ndnpaxos_2eproto {
  StaticDescriptorInitializer_ndnpaxos_2eproto() {
    protobuf_AddDesc_ndnpaxos_2eproto();
  }
} static_descriptor_initializer_ndnpaxos_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHeader::kMsgTypeFieldNumber;
const int MsgHeader::kNodeIdFieldNumber;
const int MsgHeader::kSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHeader::MsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgHeader)
}

void MsgHeader::InitAsDefaultInstance() {
}

MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgHeader)
}

void MsgHeader::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  node_id_ = 0u;
  slot_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgHeader)
  SharedDtor();
}

void MsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeader_descriptor_;
}

const MsgHeader& MsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgHeader* MsgHeader::default_instance_ = NULL;

MsgHeader* MsgHeader::New(::google::protobuf::Arena* arena) const {
  MsgHeader* n = new MsgHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_type_, slot_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndnpaxos::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::ndnpaxos::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // required uint32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // required uint64 slot_id = 3;
      case 3: {
        if (tag == 24) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgHeader)
  return false;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgHeader)
  // required .ndnpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required uint32 node_id = 2;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_id(), output);
  }

  // required uint64 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->slot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgHeader)
}

::google::protobuf::uint8* MsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgHeader)
  // required .ndnpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required uint32 node_id = 2;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_id(), target);
  }

  // required uint64 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->slot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgHeader)
  return target;
}

int MsgHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgHeader)
  int total_size = 0;

  if (has_msg_type()) {
    // required .ndnpaxos.MsgType msg_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  if (has_node_id()) {
    // required uint32 node_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  if (has_slot_id()) {
    // required uint64 slot_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->slot_id());
  }

  return total_size;
}
int MsgHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgHeader)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgType msg_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

    // required uint32 node_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());

    // required uint64 slot_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->slot_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHeader::InternalSwap(MsgHeader* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(node_id_, other->node_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeader_descriptor_;
  metadata.reflection = MsgHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHeader

// required .ndnpaxos.MsgType msg_type = 1;
bool MsgHeader::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgHeader::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgHeader::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgHeader::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::ndnpaxos::MsgType MsgHeader::msg_type() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgHeader.msg_type)
  return static_cast< ::ndnpaxos::MsgType >(msg_type_);
}
 void MsgHeader::set_msg_type(::ndnpaxos::MsgType value) {
  assert(::ndnpaxos::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgHeader.msg_type)
}

// required uint32 node_id = 2;
bool MsgHeader::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgHeader::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgHeader::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgHeader::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
 ::google::protobuf::uint32 MsgHeader::node_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgHeader.node_id)
  return node_id_;
}
 void MsgHeader::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgHeader.node_id)
}

// required uint64 slot_id = 3;
bool MsgHeader::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgHeader::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgHeader::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgHeader::clear_slot_id() {
  slot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_slot_id();
}
 ::google::protobuf::uint64 MsgHeader::slot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgHeader.slot_id)
  return slot_id_;
}
 void MsgHeader::set_slot_id(::google::protobuf::uint64 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgHeader.slot_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropValue::kIdFieldNumber;
const int PropValue::kDataFieldNumber;
const int PropValue::kCmdTypeFieldNumber;
const int PropValue::kIntegrityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropValue::PropValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.PropValue)
}

void PropValue::InitAsDefaultInstance() {
}

PropValue::PropValue(const PropValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.PropValue)
}

void PropValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_type_ = 0;
  integrity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropValue::~PropValue() {
  // @@protoc_insertion_point(destructor:ndnpaxos.PropValue)
  SharedDtor();
}

void PropValue::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PropValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropValue_descriptor_;
}

const PropValue& PropValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

PropValue* PropValue::default_instance_ = NULL;

PropValue* PropValue::New(::google::protobuf::Arena* arena) const {
  PropValue* n = new PropValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.PropValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(cmd_type_, integrity_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PropValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.PropValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ndnpaxos.PropValue.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmd_type;
        break;
      }

      // optional .ndnpaxos.CmdType cmd_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndnpaxos::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::ndnpaxos::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_integrity;
        break;
      }

      // optional bool integrity = 4;
      case 4: {
        if (tag == 32) {
         parse_integrity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrity_)));
          set_has_integrity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.PropValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.PropValue)
  return false;
#undef DO_
}

void PropValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.PropValue)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndnpaxos.PropValue.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional .ndnpaxos.CmdType cmd_type = 3;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd_type(), output);
  }

  // optional bool integrity = 4;
  if (has_integrity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->integrity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.PropValue)
}

::google::protobuf::uint8* PropValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.PropValue)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndnpaxos.PropValue.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional .ndnpaxos.CmdType cmd_type = 3;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd_type(), target);
  }

  // optional bool integrity = 4;
  if (has_integrity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->integrity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.PropValue)
  return target;
}

int PropValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.PropValue)
  int total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_data()) {
    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  return total_size;
}
int PropValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.PropValue)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .ndnpaxos.CmdType cmd_type = 3;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional bool integrity = 4;
    if (has_integrity()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.PropValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.PropValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.PropValue)
    MergeFrom(*source);
  }
}

void PropValue::MergeFrom(const PropValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.PropValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_integrity()) {
      set_integrity(from.integrity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PropValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.PropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropValue::CopyFrom(const PropValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.PropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropValue::Swap(PropValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropValue::InternalSwap(PropValue* other) {
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(integrity_, other->integrity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropValue_descriptor_;
  metadata.reflection = PropValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropValue

// required uint64 id = 1;
bool PropValue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropValue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PropValue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropValue::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 PropValue::id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.PropValue.id)
  return id_;
}
 void PropValue::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.PropValue.id)
}

// required string data = 2;
bool PropValue::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropValue::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropValue::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& PropValue::data() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.PropValue.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropValue::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndnpaxos.PropValue.data)
}
 void PropValue::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndnpaxos.PropValue.data)
}
 void PropValue::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndnpaxos.PropValue.data)
}
 ::std::string* PropValue::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ndnpaxos.PropValue.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PropValue::release_data() {
  // @@protoc_insertion_point(field_release:ndnpaxos.PropValue.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropValue::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.PropValue.data)
}

// optional .ndnpaxos.CmdType cmd_type = 3;
bool PropValue::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropValue::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PropValue::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropValue::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
 ::ndnpaxos::CmdType PropValue::cmd_type() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.PropValue.cmd_type)
  return static_cast< ::ndnpaxos::CmdType >(cmd_type_);
}
 void PropValue::set_cmd_type(::ndnpaxos::CmdType value) {
  assert(::ndnpaxos::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.PropValue.cmd_type)
}

// optional bool integrity = 4;
bool PropValue::has_integrity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropValue::set_has_integrity() {
  _has_bits_[0] |= 0x00000008u;
}
void PropValue::clear_has_integrity() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropValue::clear_integrity() {
  integrity_ = false;
  clear_has_integrity();
}
 bool PropValue::integrity() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.PropValue.integrity)
  return integrity_;
}
 void PropValue::set_integrity(bool value) {
  set_has_integrity();
  integrity_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.PropValue.integrity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPrepare::kMsgHeaderFieldNumber;
const int MsgPrepare::kBallotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPrepare::MsgPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgPrepare)
}

void MsgPrepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
}

MsgPrepare::MsgPrepare(const MsgPrepare& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgPrepare)
}

void MsgPrepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPrepare::~MsgPrepare() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgPrepare)
  SharedDtor();
}

void MsgPrepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPrepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPrepare_descriptor_;
}

const MsgPrepare& MsgPrepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgPrepare* MsgPrepare::default_instance_ = NULL;

MsgPrepare* MsgPrepare::New(::google::protobuf::Arena* arena) const {
  MsgPrepare* n = new MsgPrepare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgPrepare)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgPrepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgPrepare)
  return false;
#undef DO_
}

void MsgPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgPrepare)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgPrepare)
}

::google::protobuf::uint8* MsgPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgPrepare)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgPrepare)
  return target;
}

int MsgPrepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgPrepare)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_ballot_id()) {
    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());
  }

  return total_size;
}
int MsgPrepare::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgPrepare)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgPrepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgPrepare* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgPrepare)
    MergeFrom(*source);
  }
}

void MsgPrepare::MergeFrom(const MsgPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgPrepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPrepare::CopyFrom(const MsgPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  return true;
}

void MsgPrepare::Swap(MsgPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPrepare::InternalSwap(MsgPrepare* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(ballot_id_, other->ballot_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPrepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPrepare_descriptor_;
  metadata.reflection = MsgPrepare_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPrepare

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgPrepare::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgPrepare::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgPrepare::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgPrepare::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgPrepare::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPrepare.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgPrepare::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgPrepare.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgPrepare::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgPrepare.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgPrepare::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgPrepare.msg_header)
}

// required uint64 ballot_id = 2;
bool MsgPrepare::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgPrepare::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgPrepare::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgPrepare::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
 ::google::protobuf::uint64 MsgPrepare::ballot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPrepare.ballot_id)
  return ballot_id_;
}
 void MsgPrepare::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgPrepare.ballot_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAckPrepare::kMsgHeaderFieldNumber;
const int MsgAckPrepare::kBallotIdFieldNumber;
const int MsgAckPrepare::kReplyFieldNumber;
const int MsgAckPrepare::kMaxBallotIdFieldNumber;
const int MsgAckPrepare::kMaxPropValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAckPrepare::MsgAckPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgAckPrepare)
}

void MsgAckPrepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
  max_prop_value_ = const_cast< ::ndnpaxos::PropValue*>(&::ndnpaxos::PropValue::default_instance());
}

MsgAckPrepare::MsgAckPrepare(const MsgAckPrepare& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgAckPrepare)
}

void MsgAckPrepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  reply_ = false;
  max_ballot_id_ = GOOGLE_ULONGLONG(0);
  max_prop_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAckPrepare::~MsgAckPrepare() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgAckPrepare)
  SharedDtor();
}

void MsgAckPrepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete max_prop_value_;
  }
}

void MsgAckPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAckPrepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAckPrepare_descriptor_;
}

const MsgAckPrepare& MsgAckPrepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgAckPrepare* MsgAckPrepare::default_instance_ = NULL;

MsgAckPrepare* MsgAckPrepare::New(::google::protobuf::Arena* arena) const {
  MsgAckPrepare* n = new MsgAckPrepare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAckPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgAckPrepare)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgAckPrepare, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgAckPrepare*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(ballot_id_, max_ballot_id_);
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    reply_ = false;
    if (has_max_prop_value()) {
      if (max_prop_value_ != NULL) max_prop_value_->::ndnpaxos::PropValue::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgAckPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgAckPrepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // required bool reply = 3;
      case 3: {
        if (tag == 24) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_ballot_id;
        break;
      }

      // required uint64 max_ballot_id = 4;
      case 4: {
        if (tag == 32) {
         parse_max_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_ballot_id_)));
          set_has_max_ballot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_prop_value;
        break;
      }

      // optional .ndnpaxos.PropValue max_prop_value = 5;
      case 5: {
        if (tag == 42) {
         parse_max_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_prop_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgAckPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgAckPrepare)
  return false;
#undef DO_
}

void MsgAckPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgAckPrepare)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required bool reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reply(), output);
  }

  // required uint64 max_ballot_id = 4;
  if (has_max_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_ballot_id(), output);
  }

  // optional .ndnpaxos.PropValue max_prop_value = 5;
  if (has_max_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->max_prop_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgAckPrepare)
}

::google::protobuf::uint8* MsgAckPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgAckPrepare)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required bool reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reply(), target);
  }

  // required uint64 max_ballot_id = 4;
  if (has_max_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_ballot_id(), target);
  }

  // optional .ndnpaxos.PropValue max_prop_value = 5;
  if (has_max_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->max_prop_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgAckPrepare)
  return target;
}

int MsgAckPrepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgAckPrepare)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_ballot_id()) {
    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());
  }

  if (has_reply()) {
    // required bool reply = 3;
    total_size += 1 + 1;
  }

  if (has_max_ballot_id()) {
    // required uint64 max_ballot_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_ballot_id());
  }

  return total_size;
}
int MsgAckPrepare::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgAckPrepare)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());

    // required bool reply = 3;
    total_size += 1 + 1;

    // required uint64 max_ballot_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_ballot_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ndnpaxos.PropValue max_prop_value = 5;
  if (has_max_prop_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_prop_value_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAckPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgAckPrepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgAckPrepare* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgAckPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgAckPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgAckPrepare)
    MergeFrom(*source);
  }
}

void MsgAckPrepare::MergeFrom(const MsgAckPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgAckPrepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_max_ballot_id()) {
      set_max_ballot_id(from.max_ballot_id());
    }
    if (from.has_max_prop_value()) {
      mutable_max_prop_value()->::ndnpaxos::PropValue::MergeFrom(from.max_prop_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgAckPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgAckPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAckPrepare::CopyFrom(const MsgAckPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgAckPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAckPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  if (has_max_prop_value()) {
    if (!this->max_prop_value_->IsInitialized()) return false;
  }
  return true;
}

void MsgAckPrepare::Swap(MsgAckPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAckPrepare::InternalSwap(MsgAckPrepare* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(ballot_id_, other->ballot_id_);
  std::swap(reply_, other->reply_);
  std::swap(max_ballot_id_, other->max_ballot_id_);
  std::swap(max_prop_value_, other->max_prop_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgAckPrepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAckPrepare_descriptor_;
  metadata.reflection = MsgAckPrepare_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgAckPrepare

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgAckPrepare::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgAckPrepare::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgAckPrepare::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgAckPrepare::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgAckPrepare::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckPrepare.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgAckPrepare::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgAckPrepare.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgAckPrepare::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgAckPrepare.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgAckPrepare::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgAckPrepare.msg_header)
}

// required uint64 ballot_id = 2;
bool MsgAckPrepare::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgAckPrepare::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgAckPrepare::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgAckPrepare::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
 ::google::protobuf::uint64 MsgAckPrepare::ballot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckPrepare.ballot_id)
  return ballot_id_;
}
 void MsgAckPrepare::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAckPrepare.ballot_id)
}

// required bool reply = 3;
bool MsgAckPrepare::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgAckPrepare::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgAckPrepare::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgAckPrepare::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
 bool MsgAckPrepare::reply() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckPrepare.reply)
  return reply_;
}
 void MsgAckPrepare::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAckPrepare.reply)
}

// required uint64 max_ballot_id = 4;
bool MsgAckPrepare::has_max_ballot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgAckPrepare::set_has_max_ballot_id() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgAckPrepare::clear_has_max_ballot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgAckPrepare::clear_max_ballot_id() {
  max_ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_max_ballot_id();
}
 ::google::protobuf::uint64 MsgAckPrepare::max_ballot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckPrepare.max_ballot_id)
  return max_ballot_id_;
}
 void MsgAckPrepare::set_max_ballot_id(::google::protobuf::uint64 value) {
  set_has_max_ballot_id();
  max_ballot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAckPrepare.max_ballot_id)
}

// optional .ndnpaxos.PropValue max_prop_value = 5;
bool MsgAckPrepare::has_max_prop_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MsgAckPrepare::set_has_max_prop_value() {
  _has_bits_[0] |= 0x00000010u;
}
void MsgAckPrepare::clear_has_max_prop_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void MsgAckPrepare::clear_max_prop_value() {
  if (max_prop_value_ != NULL) max_prop_value_->::ndnpaxos::PropValue::Clear();
  clear_has_max_prop_value();
}
const ::ndnpaxos::PropValue& MsgAckPrepare::max_prop_value() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckPrepare.max_prop_value)
  return max_prop_value_ != NULL ? *max_prop_value_ : *default_instance_->max_prop_value_;
}
::ndnpaxos::PropValue* MsgAckPrepare::mutable_max_prop_value() {
  set_has_max_prop_value();
  if (max_prop_value_ == NULL) {
    max_prop_value_ = new ::ndnpaxos::PropValue;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgAckPrepare.max_prop_value)
  return max_prop_value_;
}
::ndnpaxos::PropValue* MsgAckPrepare::release_max_prop_value() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgAckPrepare.max_prop_value)
  clear_has_max_prop_value();
  ::ndnpaxos::PropValue* temp = max_prop_value_;
  max_prop_value_ = NULL;
  return temp;
}
void MsgAckPrepare::set_allocated_max_prop_value(::ndnpaxos::PropValue* max_prop_value) {
  delete max_prop_value_;
  max_prop_value_ = max_prop_value;
  if (max_prop_value) {
    set_has_max_prop_value();
  } else {
    clear_has_max_prop_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgAckPrepare.max_prop_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAccept::kMsgHeaderFieldNumber;
const int MsgAccept::kBallotIdFieldNumber;
const int MsgAccept::kPropValueFieldNumber;
const int MsgAccept::kLastSlotFieldNumber;
const int MsgAccept::kLastValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAccept::MsgAccept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgAccept)
}

void MsgAccept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
  prop_value_ = const_cast< ::ndnpaxos::PropValue*>(&::ndnpaxos::PropValue::default_instance());
}

MsgAccept::MsgAccept(const MsgAccept& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgAccept)
}

void MsgAccept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  prop_value_ = NULL;
  last_slot_ = GOOGLE_ULONGLONG(0);
  last_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAccept::~MsgAccept() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgAccept)
  SharedDtor();
}

void MsgAccept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete prop_value_;
  }
}

void MsgAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAccept_descriptor_;
}

const MsgAccept& MsgAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgAccept* MsgAccept::default_instance_ = NULL;

MsgAccept* MsgAccept::New(::google::protobuf::Arena* arena) const {
  MsgAccept* n = new MsgAccept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgAccept)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgAccept, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgAccept*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(last_slot_, last_value_);
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
    if (has_prop_value()) {
      if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prop_value;
        break;
      }

      // required .ndnpaxos.PropValue prop_value = 3;
      case 3: {
        if (tag == 26) {
         parse_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_slot;
        break;
      }

      // optional uint64 last_slot = 4;
      case 4: {
        if (tag == 32) {
         parse_last_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_slot_)));
          set_has_last_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_value;
        break;
      }

      // optional uint64 last_value = 5;
      case 5: {
        if (tag == 40) {
         parse_last_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_value_)));
          set_has_last_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgAccept)
  return false;
#undef DO_
}

void MsgAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgAccept)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required .ndnpaxos.PropValue prop_value = 3;
  if (has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->prop_value_, output);
  }

  // optional uint64 last_slot = 4;
  if (has_last_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_slot(), output);
  }

  // optional uint64 last_value = 5;
  if (has_last_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgAccept)
}

::google::protobuf::uint8* MsgAccept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgAccept)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required .ndnpaxos.PropValue prop_value = 3;
  if (has_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->prop_value_, false, target);
  }

  // optional uint64 last_slot = 4;
  if (has_last_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_slot(), target);
  }

  // optional uint64 last_value = 5;
  if (has_last_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgAccept)
  return target;
}

int MsgAccept::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgAccept)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_ballot_id()) {
    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());
  }

  if (has_prop_value()) {
    // required .ndnpaxos.PropValue prop_value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);
  }

  return total_size;
}
int MsgAccept::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgAccept)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());

    // required .ndnpaxos.PropValue prop_value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional uint64 last_slot = 4;
    if (has_last_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_slot());
    }

    // optional uint64 last_value = 5;
    if (has_last_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAccept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgAccept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgAccept* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgAccept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgAccept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgAccept)
    MergeFrom(*source);
  }
}

void MsgAccept::MergeFrom(const MsgAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgAccept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_prop_value()) {
      mutable_prop_value()->::ndnpaxos::PropValue::MergeFrom(from.prop_value());
    }
    if (from.has_last_slot()) {
      set_last_slot(from.last_slot());
    }
    if (from.has_last_value()) {
      set_last_value(from.last_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgAccept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAccept::CopyFrom(const MsgAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  if (has_prop_value()) {
    if (!this->prop_value_->IsInitialized()) return false;
  }
  return true;
}

void MsgAccept::Swap(MsgAccept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAccept::InternalSwap(MsgAccept* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(ballot_id_, other->ballot_id_);
  std::swap(prop_value_, other->prop_value_);
  std::swap(last_slot_, other->last_slot_);
  std::swap(last_value_, other->last_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAccept_descriptor_;
  metadata.reflection = MsgAccept_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgAccept

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgAccept::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgAccept::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgAccept::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgAccept::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgAccept::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAccept.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgAccept::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgAccept.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgAccept::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgAccept.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgAccept::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgAccept.msg_header)
}

// required uint64 ballot_id = 2;
bool MsgAccept::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgAccept::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgAccept::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgAccept::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
 ::google::protobuf::uint64 MsgAccept::ballot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAccept.ballot_id)
  return ballot_id_;
}
 void MsgAccept::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAccept.ballot_id)
}

// required .ndnpaxos.PropValue prop_value = 3;
bool MsgAccept::has_prop_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgAccept::set_has_prop_value() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgAccept::clear_has_prop_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgAccept::clear_prop_value() {
  if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
  clear_has_prop_value();
}
const ::ndnpaxos::PropValue& MsgAccept::prop_value() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAccept.prop_value)
  return prop_value_ != NULL ? *prop_value_ : *default_instance_->prop_value_;
}
::ndnpaxos::PropValue* MsgAccept::mutable_prop_value() {
  set_has_prop_value();
  if (prop_value_ == NULL) {
    prop_value_ = new ::ndnpaxos::PropValue;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgAccept.prop_value)
  return prop_value_;
}
::ndnpaxos::PropValue* MsgAccept::release_prop_value() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgAccept.prop_value)
  clear_has_prop_value();
  ::ndnpaxos::PropValue* temp = prop_value_;
  prop_value_ = NULL;
  return temp;
}
void MsgAccept::set_allocated_prop_value(::ndnpaxos::PropValue* prop_value) {
  delete prop_value_;
  prop_value_ = prop_value;
  if (prop_value) {
    set_has_prop_value();
  } else {
    clear_has_prop_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgAccept.prop_value)
}

// optional uint64 last_slot = 4;
bool MsgAccept::has_last_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgAccept::set_has_last_slot() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgAccept::clear_has_last_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgAccept::clear_last_slot() {
  last_slot_ = GOOGLE_ULONGLONG(0);
  clear_has_last_slot();
}
 ::google::protobuf::uint64 MsgAccept::last_slot() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAccept.last_slot)
  return last_slot_;
}
 void MsgAccept::set_last_slot(::google::protobuf::uint64 value) {
  set_has_last_slot();
  last_slot_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAccept.last_slot)
}

// optional uint64 last_value = 5;
bool MsgAccept::has_last_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MsgAccept::set_has_last_value() {
  _has_bits_[0] |= 0x00000010u;
}
void MsgAccept::clear_has_last_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void MsgAccept::clear_last_value() {
  last_value_ = GOOGLE_ULONGLONG(0);
  clear_has_last_value();
}
 ::google::protobuf::uint64 MsgAccept::last_value() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAccept.last_value)
  return last_value_;
}
 void MsgAccept::set_last_value(::google::protobuf::uint64 value) {
  set_has_last_value();
  last_value_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAccept.last_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAckAccept::kMsgHeaderFieldNumber;
const int MsgAckAccept::kBallotIdFieldNumber;
const int MsgAckAccept::kReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAckAccept::MsgAckAccept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgAckAccept)
}

void MsgAckAccept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
}

MsgAckAccept::MsgAckAccept(const MsgAckAccept& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgAckAccept)
}

void MsgAckAccept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAckAccept::~MsgAckAccept() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgAckAccept)
  SharedDtor();
}

void MsgAckAccept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgAckAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAckAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAckAccept_descriptor_;
}

const MsgAckAccept& MsgAckAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgAckAccept* MsgAckAccept::default_instance_ = NULL;

MsgAckAccept* MsgAckAccept::New(::google::protobuf::Arena* arena) const {
  MsgAckAccept* n = new MsgAckAccept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAckAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgAckAccept)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgAckAccept, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgAckAccept*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(ballot_id_, reply_);
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgAckAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgAckAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // required bool reply = 3;
      case 3: {
        if (tag == 24) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgAckAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgAckAccept)
  return false;
#undef DO_
}

void MsgAckAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgAckAccept)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required bool reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgAckAccept)
}

::google::protobuf::uint8* MsgAckAccept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgAckAccept)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required bool reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgAckAccept)
  return target;
}

int MsgAckAccept::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgAckAccept)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_ballot_id()) {
    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());
  }

  if (has_reply()) {
    // required bool reply = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int MsgAckAccept::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgAckAccept)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required uint64 ballot_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ballot_id());

    // required bool reply = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAckAccept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgAckAccept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgAckAccept* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgAckAccept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgAckAccept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgAckAccept)
    MergeFrom(*source);
  }
}

void MsgAckAccept::MergeFrom(const MsgAckAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgAckAccept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgAckAccept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgAckAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAckAccept::CopyFrom(const MsgAckAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgAckAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAckAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  return true;
}

void MsgAckAccept::Swap(MsgAckAccept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAckAccept::InternalSwap(MsgAckAccept* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(ballot_id_, other->ballot_id_);
  std::swap(reply_, other->reply_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgAckAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAckAccept_descriptor_;
  metadata.reflection = MsgAckAccept_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgAckAccept

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgAckAccept::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgAckAccept::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgAckAccept::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgAckAccept::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgAckAccept::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckAccept.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgAckAccept::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgAckAccept.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgAckAccept::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgAckAccept.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgAckAccept::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgAckAccept.msg_header)
}

// required uint64 ballot_id = 2;
bool MsgAckAccept::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgAckAccept::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgAckAccept::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgAckAccept::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
 ::google::protobuf::uint64 MsgAckAccept::ballot_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckAccept.ballot_id)
  return ballot_id_;
}
 void MsgAckAccept::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAckAccept.ballot_id)
}

// required bool reply = 3;
bool MsgAckAccept::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgAckAccept::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgAckAccept::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgAckAccept::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
 bool MsgAckAccept::reply() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgAckAccept.reply)
  return reply_;
}
 void MsgAckAccept::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgAckAccept.reply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDecide::kMsgHeaderFieldNumber;
const int MsgDecide::kValueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDecide::MsgDecide()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgDecide)
}

void MsgDecide::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
}

MsgDecide::MsgDecide(const MsgDecide& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgDecide)
}

void MsgDecide::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  value_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDecide::~MsgDecide() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgDecide)
  SharedDtor();
}

void MsgDecide::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgDecide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDecide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDecide_descriptor_;
}

const MsgDecide& MsgDecide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgDecide* MsgDecide::default_instance_ = NULL;

MsgDecide* MsgDecide::New(::google::protobuf::Arena* arena) const {
  MsgDecide* n = new MsgDecide;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDecide::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgDecide)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    value_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgDecide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgDecide)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value_id;
        break;
      }

      // required uint64 value_id = 2;
      case 2: {
        if (tag == 16) {
         parse_value_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_id_)));
          set_has_value_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgDecide)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgDecide)
  return false;
#undef DO_
}

void MsgDecide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgDecide)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required uint64 value_id = 2;
  if (has_value_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgDecide)
}

::google::protobuf::uint8* MsgDecide::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgDecide)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required uint64 value_id = 2;
  if (has_value_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgDecide)
  return target;
}

int MsgDecide::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgDecide)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_value_id()) {
    // required uint64 value_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value_id());
  }

  return total_size;
}
int MsgDecide::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgDecide)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required uint64 value_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDecide::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgDecide)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgDecide* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDecide>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgDecide)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgDecide)
    MergeFrom(*source);
  }
}

void MsgDecide::MergeFrom(const MsgDecide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgDecide)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_value_id()) {
      set_value_id(from.value_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgDecide::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgDecide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDecide::CopyFrom(const MsgDecide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgDecide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDecide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  return true;
}

void MsgDecide::Swap(MsgDecide* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDecide::InternalSwap(MsgDecide* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(value_id_, other->value_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDecide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDecide_descriptor_;
  metadata.reflection = MsgDecide_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgDecide

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgDecide::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgDecide::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgDecide::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgDecide::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgDecide::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgDecide.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgDecide::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgDecide.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgDecide::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgDecide.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgDecide::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgDecide.msg_header)
}

// required uint64 value_id = 2;
bool MsgDecide::has_value_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgDecide::set_has_value_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgDecide::clear_has_value_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgDecide::clear_value_id() {
  value_id_ = GOOGLE_ULONGLONG(0);
  clear_has_value_id();
}
 ::google::protobuf::uint64 MsgDecide::value_id() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgDecide.value_id)
  return value_id_;
}
 void MsgDecide::set_value_id(::google::protobuf::uint64 value) {
  set_has_value_id();
  value_id_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgDecide.value_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLearn::kMsgHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLearn::MsgLearn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgLearn)
}

void MsgLearn::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
}

MsgLearn::MsgLearn(const MsgLearn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgLearn)
}

void MsgLearn::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLearn::~MsgLearn() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgLearn)
  SharedDtor();
}

void MsgLearn::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgLearn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLearn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLearn_descriptor_;
}

const MsgLearn& MsgLearn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgLearn* MsgLearn::default_instance_ = NULL;

MsgLearn* MsgLearn::New(::google::protobuf::Arena* arena) const {
  MsgLearn* n = new MsgLearn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLearn::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgLearn)
  if (has_msg_header()) {
    if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgLearn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgLearn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgLearn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgLearn)
  return false;
#undef DO_
}

void MsgLearn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgLearn)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgLearn)
}

::google::protobuf::uint8* MsgLearn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgLearn)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgLearn)
  return target;
}

int MsgLearn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgLearn)
  int total_size = 0;

  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLearn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgLearn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgLearn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgLearn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgLearn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgLearn)
    MergeFrom(*source);
  }
}

void MsgLearn::MergeFrom(const MsgLearn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgLearn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgLearn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgLearn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLearn::CopyFrom(const MsgLearn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgLearn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLearn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  return true;
}

void MsgLearn::Swap(MsgLearn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLearn::InternalSwap(MsgLearn* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgLearn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLearn_descriptor_;
  metadata.reflection = MsgLearn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLearn

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgLearn::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgLearn::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgLearn::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgLearn::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgLearn::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgLearn.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgLearn::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgLearn.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgLearn::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgLearn.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgLearn::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgLearn.msg_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgTeach::kMsgHeaderFieldNumber;
const int MsgTeach::kPropValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgTeach::MsgTeach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgTeach)
}

void MsgTeach::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
  prop_value_ = const_cast< ::ndnpaxos::PropValue*>(&::ndnpaxos::PropValue::default_instance());
}

MsgTeach::MsgTeach(const MsgTeach& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgTeach)
}

void MsgTeach::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  prop_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeach::~MsgTeach() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgTeach)
  SharedDtor();
}

void MsgTeach::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete prop_value_;
  }
}

void MsgTeach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeach_descriptor_;
}

const MsgTeach& MsgTeach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgTeach* MsgTeach::default_instance_ = NULL;

MsgTeach* MsgTeach::New(::google::protobuf::Arena* arena) const {
  MsgTeach* n = new MsgTeach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgTeach::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgTeach)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    if (has_prop_value()) {
      if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgTeach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgTeach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prop_value;
        break;
      }

      // required .ndnpaxos.PropValue prop_value = 2;
      case 2: {
        if (tag == 18) {
         parse_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgTeach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgTeach)
  return false;
#undef DO_
}

void MsgTeach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgTeach)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required .ndnpaxos.PropValue prop_value = 2;
  if (has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prop_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgTeach)
}

::google::protobuf::uint8* MsgTeach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgTeach)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required .ndnpaxos.PropValue prop_value = 2;
  if (has_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prop_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgTeach)
  return target;
}

int MsgTeach::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgTeach)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_prop_value()) {
    // required .ndnpaxos.PropValue prop_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);
  }

  return total_size;
}
int MsgTeach::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgTeach)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required .ndnpaxos.PropValue prop_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgTeach)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgTeach* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgTeach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgTeach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgTeach)
    MergeFrom(*source);
  }
}

void MsgTeach::MergeFrom(const MsgTeach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgTeach)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_prop_value()) {
      mutable_prop_value()->::ndnpaxos::PropValue::MergeFrom(from.prop_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgTeach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgTeach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeach::CopyFrom(const MsgTeach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgTeach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  if (has_prop_value()) {
    if (!this->prop_value_->IsInitialized()) return false;
  }
  return true;
}

void MsgTeach::Swap(MsgTeach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgTeach::InternalSwap(MsgTeach* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(prop_value_, other->prop_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgTeach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeach_descriptor_;
  metadata.reflection = MsgTeach_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgTeach

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgTeach::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgTeach::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgTeach::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgTeach::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgTeach::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgTeach.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgTeach::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgTeach.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgTeach::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgTeach.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgTeach::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgTeach.msg_header)
}

// required .ndnpaxos.PropValue prop_value = 2;
bool MsgTeach::has_prop_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgTeach::set_has_prop_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgTeach::clear_has_prop_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgTeach::clear_prop_value() {
  if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
  clear_has_prop_value();
}
const ::ndnpaxos::PropValue& MsgTeach::prop_value() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgTeach.prop_value)
  return prop_value_ != NULL ? *prop_value_ : *default_instance_->prop_value_;
}
::ndnpaxos::PropValue* MsgTeach::mutable_prop_value() {
  set_has_prop_value();
  if (prop_value_ == NULL) {
    prop_value_ = new ::ndnpaxos::PropValue;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgTeach.prop_value)
  return prop_value_;
}
::ndnpaxos::PropValue* MsgTeach::release_prop_value() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgTeach.prop_value)
  clear_has_prop_value();
  ::ndnpaxos::PropValue* temp = prop_value_;
  prop_value_ = NULL;
  return temp;
}
void MsgTeach::set_allocated_prop_value(::ndnpaxos::PropValue* prop_value) {
  delete prop_value_;
  prop_value_ = prop_value;
  if (prop_value) {
    set_has_prop_value();
  } else {
    clear_has_prop_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgTeach.prop_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCommit::kMsgHeaderFieldNumber;
const int MsgCommit::kPropValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCommit::MsgCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgCommit)
}

void MsgCommit::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
  prop_value_ = const_cast< ::ndnpaxos::PropValue*>(&::ndnpaxos::PropValue::default_instance());
}

MsgCommit::MsgCommit(const MsgCommit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgCommit)
}

void MsgCommit::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  prop_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCommit::~MsgCommit() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgCommit)
  SharedDtor();
}

void MsgCommit::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete prop_value_;
  }
}

void MsgCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCommit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommit_descriptor_;
}

const MsgCommit& MsgCommit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgCommit* MsgCommit::default_instance_ = NULL;

MsgCommit* MsgCommit::New(::google::protobuf::Arena* arena) const {
  MsgCommit* n = new MsgCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgCommit)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    if (has_prop_value()) {
      if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prop_value;
        break;
      }

      // required .ndnpaxos.PropValue prop_value = 2;
      case 2: {
        if (tag == 18) {
         parse_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgCommit)
  return false;
#undef DO_
}

void MsgCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgCommit)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required .ndnpaxos.PropValue prop_value = 2;
  if (has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prop_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgCommit)
}

::google::protobuf::uint8* MsgCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgCommit)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required .ndnpaxos.PropValue prop_value = 2;
  if (has_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prop_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgCommit)
  return target;
}

int MsgCommit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgCommit)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_prop_value()) {
    // required .ndnpaxos.PropValue prop_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);
  }

  return total_size;
}
int MsgCommit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgCommit)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required .ndnpaxos.PropValue prop_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgCommit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgCommit)
    MergeFrom(*source);
  }
}

void MsgCommit::MergeFrom(const MsgCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_prop_value()) {
      mutable_prop_value()->::ndnpaxos::PropValue::MergeFrom(from.prop_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommit::CopyFrom(const MsgCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  if (has_prop_value()) {
    if (!this->prop_value_->IsInitialized()) return false;
  }
  return true;
}

void MsgCommit::Swap(MsgCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCommit::InternalSwap(MsgCommit* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(prop_value_, other->prop_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgCommit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCommit_descriptor_;
  metadata.reflection = MsgCommit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCommit

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgCommit::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgCommit::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgCommit::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgCommit::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgCommit::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgCommit.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgCommit::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgCommit.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgCommit::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgCommit.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgCommit::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgCommit.msg_header)
}

// required .ndnpaxos.PropValue prop_value = 2;
bool MsgCommit::has_prop_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgCommit::set_has_prop_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgCommit::clear_has_prop_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgCommit::clear_prop_value() {
  if (prop_value_ != NULL) prop_value_->::ndnpaxos::PropValue::Clear();
  clear_has_prop_value();
}
const ::ndnpaxos::PropValue& MsgCommit::prop_value() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgCommit.prop_value)
  return prop_value_ != NULL ? *prop_value_ : *default_instance_->prop_value_;
}
::ndnpaxos::PropValue* MsgCommit::mutable_prop_value() {
  set_has_prop_value();
  if (prop_value_ == NULL) {
    prop_value_ = new ::ndnpaxos::PropValue;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgCommit.prop_value)
  return prop_value_;
}
::ndnpaxos::PropValue* MsgCommit::release_prop_value() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgCommit.prop_value)
  clear_has_prop_value();
  ::ndnpaxos::PropValue* temp = prop_value_;
  prop_value_ = NULL;
  return temp;
}
void MsgCommit::set_allocated_prop_value(::ndnpaxos::PropValue* prop_value) {
  delete prop_value_;
  prop_value_ = prop_value;
  if (prop_value) {
    set_has_prop_value();
  } else {
    clear_has_prop_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgCommit.prop_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCommand::kMsgHeaderFieldNumber;
const int MsgCommand::kCmdTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCommand::MsgCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgCommand)
}

void MsgCommand::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::ndnpaxos::MsgHeader*>(&::ndnpaxos::MsgHeader::default_instance());
}

MsgCommand::MsgCommand(const MsgCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgCommand)
}

void MsgCommand::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  cmd_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCommand::~MsgCommand() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgCommand)
  SharedDtor();
}

void MsgCommand::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommand_descriptor_;
}

const MsgCommand& MsgCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgCommand* MsgCommand::default_instance_ = NULL;

MsgCommand* MsgCommand::New(::google::protobuf::Arena* arena) const {
  MsgCommand* n = new MsgCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgCommand)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
    }
    cmd_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndnpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // required .ndnpaxos.CmdType cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndnpaxos::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::ndnpaxos::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgCommand)
  return false;
#undef DO_
}

void MsgCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgCommand)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_header_, output);
  }

  // required .ndnpaxos.CmdType cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgCommand)
}

::google::protobuf::uint8* MsgCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgCommand)
  // required .ndnpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_header_, false, target);
  }

  // required .ndnpaxos.CmdType cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgCommand)
  return target;
}

int MsgCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgCommand)
  int total_size = 0;

  if (has_msg_header()) {
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);
  }

  if (has_cmd_type()) {
    // required .ndnpaxos.CmdType cmd_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  return total_size;
}
int MsgCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgCommand)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ndnpaxos.MsgHeader msg_header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_header_);

    // required .ndnpaxos.CmdType cmd_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgCommand)
    MergeFrom(*source);
  }
}

void MsgCommand::MergeFrom(const MsgCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::ndnpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommand::CopyFrom(const MsgCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header_->IsInitialized()) return false;
  }
  return true;
}

void MsgCommand::Swap(MsgCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCommand::InternalSwap(MsgCommand* other) {
  std::swap(msg_header_, other->msg_header_);
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCommand_descriptor_;
  metadata.reflection = MsgCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCommand

// required .ndnpaxos.MsgHeader msg_header = 1;
bool MsgCommand::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgCommand::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgCommand::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgCommand::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::ndnpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
const ::ndnpaxos::MsgHeader& MsgCommand::msg_header() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgCommand.msg_header)
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
::ndnpaxos::MsgHeader* MsgCommand::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) {
    msg_header_ = new ::ndnpaxos::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgCommand.msg_header)
  return msg_header_;
}
::ndnpaxos::MsgHeader* MsgCommand::release_msg_header() {
  // @@protoc_insertion_point(field_release:ndnpaxos.MsgCommand.msg_header)
  clear_has_msg_header();
  ::ndnpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
void MsgCommand::set_allocated_msg_header(::ndnpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ndnpaxos.MsgCommand.msg_header)
}

// required .ndnpaxos.CmdType cmd_type = 2;
bool MsgCommand::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgCommand::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgCommand::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgCommand::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
 ::ndnpaxos::CmdType MsgCommand::cmd_type() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgCommand.cmd_type)
  return static_cast< ::ndnpaxos::CmdType >(cmd_type_);
}
 void MsgCommand::set_cmd_type(::ndnpaxos::CmdType value) {
  assert(::ndnpaxos::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgCommand.cmd_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPeriodTryTime::kPercentFieldNumber;
const int MsgPeriodTryTime::kPeriodFieldNumber;
const int MsgPeriodTryTime::kExePeriodFieldNumber;
const int MsgPeriodTryTime::kTryTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPeriodTryTime::MsgPeriodTryTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgPeriodTryTime)
}

void MsgPeriodTryTime::InitAsDefaultInstance() {
}

MsgPeriodTryTime::MsgPeriodTryTime(const MsgPeriodTryTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgPeriodTryTime)
}

void MsgPeriodTryTime::SharedCtor() {
  _cached_size_ = 0;
  percent_ = 0;
  period_ = 0u;
  exe_period_ = 0u;
  try_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPeriodTryTime::~MsgPeriodTryTime() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgPeriodTryTime)
  SharedDtor();
}

void MsgPeriodTryTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPeriodTryTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPeriodTryTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPeriodTryTime_descriptor_;
}

const MsgPeriodTryTime& MsgPeriodTryTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgPeriodTryTime* MsgPeriodTryTime::default_instance_ = NULL;

MsgPeriodTryTime* MsgPeriodTryTime::New(::google::protobuf::Arena* arena) const {
  MsgPeriodTryTime* n = new MsgPeriodTryTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPeriodTryTime::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgPeriodTryTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgPeriodTryTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgPeriodTryTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(percent_, try_time_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgPeriodTryTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgPeriodTryTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float percent = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // required uint32 period = 2;
      case 2: {
        if (tag == 16) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exe_period;
        break;
      }

      // required uint32 exe_period = 3;
      case 3: {
        if (tag == 24) {
         parse_exe_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exe_period_)));
          set_has_exe_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_try_time;
        break;
      }

      // required uint32 try_time = 4;
      case 4: {
        if (tag == 32) {
         parse_try_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_time_)));
          set_has_try_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgPeriodTryTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgPeriodTryTime)
  return false;
#undef DO_
}

void MsgPeriodTryTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgPeriodTryTime)
  // required float percent = 1;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->percent(), output);
  }

  // required uint32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->period(), output);
  }

  // required uint32 exe_period = 3;
  if (has_exe_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exe_period(), output);
  }

  // required uint32 try_time = 4;
  if (has_try_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->try_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgPeriodTryTime)
}

::google::protobuf::uint8* MsgPeriodTryTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgPeriodTryTime)
  // required float percent = 1;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->percent(), target);
  }

  // required uint32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->period(), target);
  }

  // required uint32 exe_period = 3;
  if (has_exe_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exe_period(), target);
  }

  // required uint32 try_time = 4;
  if (has_try_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->try_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgPeriodTryTime)
  return target;
}

int MsgPeriodTryTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ndnpaxos.MsgPeriodTryTime)
  int total_size = 0;

  if (has_percent()) {
    // required float percent = 1;
    total_size += 1 + 4;
  }

  if (has_period()) {
    // required uint32 period = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  if (has_exe_period()) {
    // required uint32 exe_period = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exe_period());
  }

  if (has_try_time()) {
    // required uint32 try_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_time());
  }

  return total_size;
}
int MsgPeriodTryTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgPeriodTryTime)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float percent = 1;
    total_size += 1 + 4;

    // required uint32 period = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());

    // required uint32 exe_period = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exe_period());

    // required uint32 try_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPeriodTryTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgPeriodTryTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgPeriodTryTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPeriodTryTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgPeriodTryTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgPeriodTryTime)
    MergeFrom(*source);
  }
}

void MsgPeriodTryTime::MergeFrom(const MsgPeriodTryTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgPeriodTryTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_exe_period()) {
      set_exe_period(from.exe_period());
    }
    if (from.has_try_time()) {
      set_try_time(from.try_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgPeriodTryTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgPeriodTryTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPeriodTryTime::CopyFrom(const MsgPeriodTryTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgPeriodTryTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPeriodTryTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgPeriodTryTime::Swap(MsgPeriodTryTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPeriodTryTime::InternalSwap(MsgPeriodTryTime* other) {
  std::swap(percent_, other->percent_);
  std::swap(period_, other->period_);
  std::swap(exe_period_, other->exe_period_);
  std::swap(try_time_, other->try_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPeriodTryTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPeriodTryTime_descriptor_;
  metadata.reflection = MsgPeriodTryTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPeriodTryTime

// required float percent = 1;
bool MsgPeriodTryTime::has_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgPeriodTryTime::set_has_percent() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgPeriodTryTime::clear_has_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgPeriodTryTime::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
 float MsgPeriodTryTime::percent() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPeriodTryTime.percent)
  return percent_;
}
 void MsgPeriodTryTime::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgPeriodTryTime.percent)
}

// required uint32 period = 2;
bool MsgPeriodTryTime::has_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgPeriodTryTime::set_has_period() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgPeriodTryTime::clear_has_period() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgPeriodTryTime::clear_period() {
  period_ = 0u;
  clear_has_period();
}
 ::google::protobuf::uint32 MsgPeriodTryTime::period() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPeriodTryTime.period)
  return period_;
}
 void MsgPeriodTryTime::set_period(::google::protobuf::uint32 value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgPeriodTryTime.period)
}

// required uint32 exe_period = 3;
bool MsgPeriodTryTime::has_exe_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgPeriodTryTime::set_has_exe_period() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgPeriodTryTime::clear_has_exe_period() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgPeriodTryTime::clear_exe_period() {
  exe_period_ = 0u;
  clear_has_exe_period();
}
 ::google::protobuf::uint32 MsgPeriodTryTime::exe_period() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPeriodTryTime.exe_period)
  return exe_period_;
}
 void MsgPeriodTryTime::set_exe_period(::google::protobuf::uint32 value) {
  set_has_exe_period();
  exe_period_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgPeriodTryTime.exe_period)
}

// required uint32 try_time = 4;
bool MsgPeriodTryTime::has_try_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgPeriodTryTime::set_has_try_time() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgPeriodTryTime::clear_has_try_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgPeriodTryTime::clear_try_time() {
  try_time_ = 0u;
  clear_has_try_time();
}
 ::google::protobuf::uint32 MsgPeriodTryTime::try_time() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgPeriodTryTime.try_time)
  return try_time_;
}
 void MsgPeriodTryTime::set_try_time(::google::protobuf::uint32 value) {
  set_has_try_time();
  try_time_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgPeriodTryTime.try_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResult::kThroughputFieldNumber;
const int MsgResult::kMsgPttFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResult::MsgResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndnpaxos.MsgResult)
}

void MsgResult::InitAsDefaultInstance() {
}

MsgResult::MsgResult(const MsgResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndnpaxos.MsgResult)
}

void MsgResult::SharedCtor() {
  _cached_size_ = 0;
  throughput_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:ndnpaxos.MsgResult)
  SharedDtor();
}

void MsgResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResult_descriptor_;
}

const MsgResult& MsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ndnpaxos_2eproto();
  return *default_instance_;
}

MsgResult* MsgResult::default_instance_ = NULL;

MsgResult* MsgResult::New(::google::protobuf::Arena* arena) const {
  MsgResult* n = new MsgResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ndnpaxos.MsgResult)
  throughput_ = 0u;
  msg_ptt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndnpaxos.MsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 throughput = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &throughput_)));
          set_has_throughput();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_ptt;
        break;
      }

      // repeated .ndnpaxos.MsgPeriodTryTime msg_ptt = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_ptt:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msg_ptt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msg_ptt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_msg_ptt;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndnpaxos.MsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndnpaxos.MsgResult)
  return false;
#undef DO_
}

void MsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndnpaxos.MsgResult)
  // required uint32 throughput = 1;
  if (has_throughput()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->throughput(), output);
  }

  // repeated .ndnpaxos.MsgPeriodTryTime msg_ptt = 2;
  for (unsigned int i = 0, n = this->msg_ptt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_ptt(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndnpaxos.MsgResult)
}

::google::protobuf::uint8* MsgResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndnpaxos.MsgResult)
  // required uint32 throughput = 1;
  if (has_throughput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->throughput(), target);
  }

  // repeated .ndnpaxos.MsgPeriodTryTime msg_ptt = 2;
  for (unsigned int i = 0, n = this->msg_ptt_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->msg_ptt(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndnpaxos.MsgResult)
  return target;
}

int MsgResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndnpaxos.MsgResult)
  int total_size = 0;

  // required uint32 throughput = 1;
  if (has_throughput()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->throughput());
  }
  // repeated .ndnpaxos.MsgPeriodTryTime msg_ptt = 2;
  total_size += 1 * this->msg_ptt_size();
  for (int i = 0; i < this->msg_ptt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_ptt(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndnpaxos.MsgResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndnpaxos.MsgResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndnpaxos.MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndnpaxos.MsgResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msg_ptt_.MergeFrom(from.msg_ptt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_throughput()) {
      set_throughput(from.throughput());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndnpaxos.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndnpaxos.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_ptt())) return false;
  return true;
}

void MsgResult::Swap(MsgResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResult::InternalSwap(MsgResult* other) {
  std::swap(throughput_, other->throughput_);
  msg_ptt_.UnsafeArenaSwap(&other->msg_ptt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgResult_descriptor_;
  metadata.reflection = MsgResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgResult

// required uint32 throughput = 1;
bool MsgResult::has_throughput() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgResult::set_has_throughput() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgResult::clear_has_throughput() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgResult::clear_throughput() {
  throughput_ = 0u;
  clear_has_throughput();
}
 ::google::protobuf::uint32 MsgResult::throughput() const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgResult.throughput)
  return throughput_;
}
 void MsgResult::set_throughput(::google::protobuf::uint32 value) {
  set_has_throughput();
  throughput_ = value;
  // @@protoc_insertion_point(field_set:ndnpaxos.MsgResult.throughput)
}

// repeated .ndnpaxos.MsgPeriodTryTime msg_ptt = 2;
int MsgResult::msg_ptt_size() const {
  return msg_ptt_.size();
}
void MsgResult::clear_msg_ptt() {
  msg_ptt_.Clear();
}
const ::ndnpaxos::MsgPeriodTryTime& MsgResult::msg_ptt(int index) const {
  // @@protoc_insertion_point(field_get:ndnpaxos.MsgResult.msg_ptt)
  return msg_ptt_.Get(index);
}
::ndnpaxos::MsgPeriodTryTime* MsgResult::mutable_msg_ptt(int index) {
  // @@protoc_insertion_point(field_mutable:ndnpaxos.MsgResult.msg_ptt)
  return msg_ptt_.Mutable(index);
}
::ndnpaxos::MsgPeriodTryTime* MsgResult::add_msg_ptt() {
  // @@protoc_insertion_point(field_add:ndnpaxos.MsgResult.msg_ptt)
  return msg_ptt_.Add();
}
::google::protobuf::RepeatedPtrField< ::ndnpaxos::MsgPeriodTryTime >*
MsgResult::mutable_msg_ptt() {
  // @@protoc_insertion_point(field_mutable_list:ndnpaxos.MsgResult.msg_ptt)
  return &msg_ptt_;
}
const ::google::protobuf::RepeatedPtrField< ::ndnpaxos::MsgPeriodTryTime >&
MsgResult::msg_ptt() const {
  // @@protoc_insertion_point(field_list:ndnpaxos.MsgResult.msg_ptt)
  return msg_ptt_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ndnpaxos

// @@protoc_insertion_point(global_scope)
